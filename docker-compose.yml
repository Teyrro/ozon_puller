volumes:
  app-db-data:

services:
  redis_server:
    networks:
      - traefik-public
      - default
    image: redis:alpine
    container_name: redis_server
    restart: always
    expose:
      - 6379
    env_file: .env

  db:
    networks:
      - traefik-public
      - default
    build: backend/compose/multiple_databases_image
    restart: always
    ports:
      - 5432:5432
    volumes:
      - app-db-data:/var/lib/postgresql/data/pgdata
    env_file:
      - .env
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD?Variable not set}
      - POSTGRES_USER=${DATABASE_USER?Variable not set}
      - POSTGRES_DB=${DATABASE_NAME?Variable not set}
    expose:
      - ${DATABASE_PORT}

  backend:
    networks:
      - traefik-public
      - default
    image: '${DOCKER_IMAGE_BACKEND?Variable not set}:${TAG-latest}'
    restart: always
    links:
      - db:database
    depends_on:
      - db
    env_file:
      - .env
    environment:
      - POSTGRES_SERVER=${DATABASE_HOST}
      - POSTGRES_PORT=${DATABASE_PORT}
      - POSTGRES_DB=${DATABASE_NAME}
      - POSTGRES_USER=${DATABASE_USER?Variable not set}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD?Variable not set}
    build:
      context: ./backend
      dockerfile: ./compose/backend/Dockerfile
      args:
        INSTALL_DEV: ${INSTALL_DEV-false}
    platform: linux/amd64 # Patch for M1 Mac
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.constraint-label=traefik-public

      - traefik.http.services.${STACK_NAME?Variable not set}-backend.loadbalancer.server.port=80

      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-http.rule=Host(`${DOMAIN?Variable not set}`, `www.${DOMAIN?Variable not set}`) && PathPrefix(`/api`, `/docs`, `/redoc`)
      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-http.entrypoints=http

      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-https.rule=Host(`${DOMAIN?Variable not set}`, `www.${DOMAIN?Variable not set}`) && PathPrefix(`/api`, `/docs`, `/redoc`)
      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-https.entrypoints=https
      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-https.tls=true
      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-https.tls.certresolver=le

      # Define Traefik Middleware to handle domain with and without "www" to redirect to only one
      - traefik.http.middlewares.${STACK_NAME?Variable not set}-www-redirect.redirectregex.regex=^http(s)?://www.(${DOMAIN?Variable not set})/(.*)
      # Redirect a domain with www to non-www
      - traefik.http.middlewares.${STACK_NAME?Variable not set}-www-redirect.redirectregex.replacement=http$${1}://${DOMAIN?Variable not set}/$${3}

      # Enable www redirection for HTTP and HTTPS
      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-http.middlewares=https-redirect,${STACK_NAME?Variable not set}-www-redirect
      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-https.middlewares=${STACK_NAME?Variable not set}-www-redirect

  celery_worker:
    networks:
      - traefik-public
      - default
    container_name: celery_worker
    restart: always
    # platform: linux/arm64/v8
    build:
      context: ./backend
      dockerfile: ./compose/backend/Dockerfile
    command: "watchfiles 'celery -A app.core.celery worker -l info' "
    depends_on:
      - db
      - redis_server
    env_file: .env

  celery_beat: #Good for crontab and schedule tasks
    networks:
      - traefik-public
      - default
    container_name: celery_beat
    restart: always
    # platform: linux/arm64/v8
    build:
      context: ./backend
      dockerfile: ./compose/backend/Dockerfile
      args:
        INSTALL_DEV: ${INSTALL_DEV-false}
    command: celery -A app.core.celery beat -l info -S sqlalchemy
    depends_on:
      - celery_worker
      - db
      - redis_server
    env_file: .env



networks:
  traefik-public:
    # Allow setting it to false for testing
    external: true
